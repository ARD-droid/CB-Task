# -*- coding: utf-8 -*-
"""Task-2(CB)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-gjkFzT4yuQkGm2ceXtClDz762v5uQCe
"""

!pip install numpy as np

# Write a program to calculate Addition or Subtraction of 2 Matrices.
r=int(input("rows of the matrix : " ))
c=int(input("coloum of the matrix : " ))

mat_1=[ ]
mat_2=[ ]

for i in range(r):
    row=[]
    for j in range(c):
          val=int(input(f"Enter The element of the First Matrix [{i} {j}] : "))
          row.append(val)

    mat_1.append(row)

# =int(input("rows of the matrix : " ))
# c=int(input("coloum of the matrix : " ))

for i in range(r):
    row=[]
    for j in range(c):
      val=int(input(f"Enter the element of Matrix 2 [{i}][{j}] : "))
      row.append(val)

    mat_2.append(row)

print(mat_1)
print(mat_2)

operation=input("Enter Operation to Perform (add/sub) : ").strip().lower()

result=[ ]

for i in range(r):
  row = []
  for j in range(c):
    if operation == 'add':
        row.append( mat_1[i][j] + mat_2[i][j] )
    elif operation =='sub':
          row.append( mat_1[i][j] - mat_2[i][j] )
    else :
       print("Invalid Error ")
       exit()
  result.append(row)

for a in result
  print(a)

#----------------------------By using Numpy-----------------------------
import numpy as np
r = int(input("Enter Number of rows: "))
c = int(input("Enter Number of columns: "))

l1 = list(map(int, input("Enter the elements of First Matrix row-wise: ").split()))
l2 = list(map(int, input("Enter the elements of Second Matrix row-wise: ").split()))

mat1 = np.array(l1).reshape(r, c)
mat2 = np.array(l2).reshape(r, c)

operation=input("Enter the operation (add/sub) : ").strip().lower()

if operation =='add':
  x=mat1+mat2
elif operation=='sub':
  x=mat1-mat2

print(x)

# Write a program to check if a given Matrix is an Identity Matrix (Diagonal 1 Rest 0).
r=int(input("Enter the number of rows and coloum(square matrixe)  : "))

matrix=[ ]

for i in range(r):
    row=[]
    for j in range(r):
       val=int(input(f'Enter the element of the matrix [{i}][{j}] : '))
       row.append(val)
    matrix.append(row)

is_identity=True

for i in range(r):
  for j in range(r):
    if i==j and matrix[i][j]!=1:
       is_identity = False
       break
    elif i != j and matrix[i][j] !=0 :
            is_identity = False
            break


# if is_identity:
#         print("The matrix is an identity matrix.")
# else:
#       print("The matrix is NOT an identity matrix.")

if is_identity == True:
    print("The matrix is an identity matrix.")
else:
    print("The matrix is NOT an identity matrix.")

## ----------------------------By using Numpy-----------------------------

# Write a program to check if a given Matrix is an Identity Matrix (Diagonal 1 Rest 0).
import numpy as np
r=int(input("Enter the number of rows and coloum(square matrixe)  : "))
l=list(map(int,input("Enter The eelement Row wise : ").split()))

mat=np.array(l).reshape(r,r)

print(mat)

if np.array_equal(mat,np.identity(2)):
  print("Matrix is Identity Matrix ")
else:
  print("Matrix is not Identity Matrix ")

## Write a program to sort Rows of Matrix in Ascending Order & Columns in Descendng Order.
r=int(input("Enter THe Number of Rows : "))
c=int(input("Enter THe Number of coloum : "))
matrix=[ ]

for i in range(r) :
  row=[]
  for j in range(c):
    val=int(input(f'Enter The Element of The Matrix [{i}][{j}] : '))
    row.append(val)
  row.sort()
  matrix.append(row)


for col in range(c):
    column=[]
    for row in range(r):
       cl=matrix[row][col]
       column.append(cl)

    column.sort(reverse=True)
    for row in range(r):
      matrix[row][col] = column[row]

for i in matrix:
  print(i)

##------------------------ By Usisng Numpy------------------------------------
import numpy as np
r=int(input("Enter THe Number of Rows : "))
c=int(input("Enter THe Number of coloum : "))
matrix=[ ]

for i in range(r) :
  row=[]
  for j in range(c):
    val=int(input(f'Enter The Element of The Matrix [{i}][{j}] : '))
    row.append(val)
  row.sort()
  matrix.append(row)

a=np.array(matrix)
a=-np.sort(-a,axis=0)
print(a)

## Write a program to accept Matrix & Interchange the Diagonals.
r=int(input("Enter The Square Matrix : "))
mat=[]

for i in range(r):
   row=[]
   for j in range(r):
        val=int(input(f'Enter The element of The Matrix [{i}][{j}] : '))
        row.append(val)
   mat.append(row)

for i in mat :
   print(i)

for i in range(r):
  mat[i][i], mat[i][r-1-i]=mat[i][r-1-i],mat[i][i]


for i in mat :
  print(i)

##------------------------By using Numpy-----------
import numpy as np
r=int(input("Enter The rows/coloum of the Square Matrix : "))

a=list(map(int,input("Enter The Element of The Matrix Row Wise : ").split()))
mat=np.array(a).reshape(r,r)
print(mat)

for i in range(r):
  mat[i][i], mat[i][r-1-i]=mat[i][r-1-i],mat[i][i]


for i in mat:
  print(i)

## Write a program to calculate Sum of Main & Opposite Diagonal Elements of a Matrix

r=int(input("Enter The Square Matrix : "))
mat=[]
Sum_of_Main=0
Sum_of_Oopposite_diaognal=0
for i in range(r):
   row=[]
   for j in range(r):
        val=int(input(f'Enter The element of The Matrix [{i}][{j}] : '))
        row.append(val)
   mat.append(row)

for i in mat :
   print(i)

for i in range(r):
  Sum_of_Main +=mat[i][i]
  Sum_of_Oopposite_diaognal += mat[i][r-1-i]

print("Sum of Main Diaognal : ", Sum_of_Main)
print("Sum of opposite Diaognal : ",Sum_of_Oopposite_diaognal)

## if we use Numpy If you use NumPy, the only major difference will be in how you take input and represent the matrix.
## The logic to compute the sum of main and opposite diagonal elements remains almost the sameâ€”just more compact.

## Write a program to calculate Trace (Sum Of Diagonal) & Normal (Square Root Of Sum Of Square Of All Elements) of a given Matrix.
import math
r=int(input("Enter The Square Matrix : "))
mat=[]
Sum_of_Main=0
Sum_of_Oopposite_diaognal=0
Sum_Of_Square_Of_All_Elements=0
for i in range(r):
   row=[]
   for j in range(r):
        val=int(input(f'Enter The element of The Matrix [{i}][{j}] : '))
        row.append(val)
   mat.append(row)

for i in mat :
   print(i)

for i in range(r):
  Sum_of_Main +=mat[i][i]
  Sum_of_Oopposite_diaognal += mat[i][r-1-i]

for i in range(r):
  for j in range(r):
       Sum_Of_Square_Of_All_Elements +=mat[i][j]*mat[i][j] #or write mat[i][j]**2 which means power of 2

print(Sum_Of_Square_Of_All_Elements )
normal=math.sqrt(Sum_Of_Square_Of_All_Elements )
print(normal)

print("Sum of Main Diaognal : ", Sum_of_Main)
print("Sum of opposite Diaognal : ",Sum_of_Oopposite_diaognal)