CREATE DATABASE UNIVERSITY;
USE UNIVERSITY;

CREATE TABLE STUDENT(
STUDENT_ID INT PRIMARY KEY,
FIRST_NAME VARCHAR(100),
LAST_NAME VARCHAR(100),
EMAIL VARCHAR(100),
PHONE VARCHAR(20),
DOB DATE,
ENROLLMENT_DATE DATE,
DEPARTMENT_ID INT,
FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
);

INSERT INTO STUDENT VALUES
(301, 'John', 'Doe', 'john.doe@univ.edu', '9000011111', '2002-05-14', '2021-08-01', 1),
(302, 'Jane', 'Smith', 'jane.smith@univ.edu', '9000011112', '2001-11-22', '2020-08-01', 2),
(303, 'Michael', 'Brown', 'michael.brown@univ.edu', '9000011113', '2003-02-17', '2022-08-01', 1),
(304, 'Emily', 'Davis', 'emily.davis@univ.edu', '9000011114', '2002-09-30', '2021-08-01', 3),
(305, 'Chris', 'Wilson', 'chris.wilson@univ.edu', '9000011115', '2001-07-12', '2020-08-01', 1),
(306, 'Anna', 'Taylor', 'anna.taylor@univ.edu', '9000011116', '2002-03-10', '2021-08-01', 2),
(307, 'Tom', 'Clark', 'tom.clark@univ.edu', '9000011117', '2002-12-25', '2021-08-01', 3),
(308, 'Laura', 'Martinez', 'laura.martinez@univ.edu', '9000011118', '2001-08-19', '2020-08-01', 1);

SElect *FROM STUDENT;



CREATE TABLE COURSE(
COURSE_ID INT PRIMARY KEY ,
COURSE_NAME VARCHAR(100),
DEPARTMENT_ID INT,
PROFESSOR_ID INT,
CREDITS INT,
FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID),
FOREIGN KEY(PROFESSOR_ID) REFERENCES PROFESSOR(PROFESSOR_ID)
);

INSERT INTO COURSE VALUES
(201, 'Database Systems', 1, 101, 4),
(202, 'Operating Systems', 1, 102, 3),
(203, 'Digital Circuits', 2, 103, 3),
(204, 'Thermodynamics', 3, 104, 4),
(205, 'Data Structures', 1, 101, 3),
(206, 'Machine Learning', 1, 102, 4);
INSERT INTO COURSE VALUES 
(207, 'Embedded Systems', 2, 101, 4);

SELECT * FROM COURSE;

CREATE TABLE DEPARTMENT(
DEPARTMENT_ID INT PRIMARY KEY,
DEPARTMENT_NAME VARCHAR(100)
);

INSERT INTO DEPARTMENT VALUES 
(1, 'Computer Science'),
(2, 'Electrical Engineering'),
(3, 'Mechanical Engineering');



CREATE TABLE PROFESSOR(
PROFESSOR_ID INT PRIMARY KEY,
FIRST_NAME VARCHAR(100),
LAST_NAME VARCHAR(100),
EMAIL VARCHAR(100),
PHONE VARCHAR(20)
);

INSERT INTO PROFESSOR VALUES
(101, 'Alice', 'Johnson', 'alice.johnson@univ.edu', '9876543210'),
(102, 'Bob', 'Smith', 'bob.smith@univ.edu', '9876543211'),
(103, 'Carol', 'Davis', 'carol.davis@univ.edu', '9876543212'),
(104, 'David', 'Lee', 'david.lee@univ.edu', '9876543213');

INSERT INTO PROFESSOR VALUES 
(105, 'Alan', 'Turing','alan.turing@univ.edu',9638521475);

SELECT * FROM PROFESSOR;

CREATE TABLE ENROLLMENT (
ENROLLMENT_ID INT PRIMARY KEY,
STUDENT_ID INT,
COURSE_ID INT,
ENROLLMENT_DATE DATE,
GRADE VARCHAR(20),
FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
FOREIGN KEY(COURSE_ID) REFERENCES COURSE(COURSE_ID)
);
INSERT INTO ENROLLMENT VALUES
(401, 301, 201, '2021-08-10', 'A'),
(402, 301, 202, '2021-08-11', 'B+'),
(403, 302, 203, '2020-08-15', 'A-'),
(404, 303, 205, '2022-08-12', 'B'),
(405, 304, 204, '2021-08-13', 'A'),
(406, 305, 201, '2020-08-10', 'B+'),
(407, 306, 203, '2021-08-14', 'C'),
(408, 308, 206, '2020-08-20', 'A'),
(409, 301, 205, '2021-08-15', 'A-'),
(410, 305, 206, '2020-08-21', 'B');

SELECT*FROM ENROLLMENT;
##----------------------------------------------------------Queries----------------------------------

## Query-1 --> Find the Total Number of Students in Each Department

SELECT DEPARTMENT.DEPARTMENT_NAME,COUNT(STUDENT.STUDENT_ID) AS TOTAL_STUDENT 
FROM STUDENT
INNER JOIN DEPARTMENT ON DEPARTMENT.DEPARTMENT_ID=STUDENT.DEPARTMENT_ID
GROUP BY DEPARTMENT.DEPARTMENT_NAME;

## Query-2 --> List All Courses Taught by a Specific Professor

SELECT COURSE.COURSE_NAME,COURSE.PROFESSOR_ID,PROFESSOR.FIRST_NAME
FROM COURSE
INNER JOIN PROFESSOR ON PROFESSOR.PROFESSOR_ID=COURSE.PROFESSOR_ID;

## Query-3 -->  Find the Average Grade of Students in Each Course

SELECT  ENROLLMENT.COURSE_ID,COURSE.COURSE_NAME,AVG
(CASE GRADE
            WHEN 'A+' THEN 10
            WHEN 'A'  THEN 9
            WHEN 'B+' THEN 8
            WHEN 'B'  THEN 7
            WHEN 'C'  THEN 6
            WHEN 'D'  THEN 5
            WHEN 'F'  THEN 0
            ELSE NULL
            END
                  ) AS AVERAGE_GRADE_SCORE
FROM  ENROLLMENT
INNER JOIN COURSE ON  ENROLLMENT.COURSE_ID=COURSE.COURSE_ID
GROUP BY  ENROLLMENT.COURSE_ID,COURSE.COURSE_NAME ;

## QUERY-4 --> List All Students Who Have Not Enrolled in Any Courses

SELECT STUDENT.STUDENT_ID ,STUDENT.FIRST_NAME
FROM STUDENT
LEFT JOIN ENROLLMENT ON STUDENT.STUDENT_ID=ENROLLMENT.STUDENT_ID
## WHERE STUDENT.STUDENT_ID != ENROLLMENT.STUDENT_ID;
## This will always return zero rows:
##Because you're saying:
-- Join where STUDENT.STUDENT_ID = ENROLLMENT.STUDENT_ID (same ID)
-- Then filter where they are not equal ❌
-- That can never be true — so the result is always empty.
WHERE ENROLLMENT.STUDENT_ID IS NULL;

## QUERY-5 --> Find the Number of Courses Offered by Each Department

SELECT DEPARTMENT.DEPARTMENT_NAME,COUNT(COURSE.COURSE_ID) AS NUMBER_OF_COURSE
FROM COURSE
LEFT JOIN DEPARTMENT ON COURSE.DEPARTMENT_ID=DEPARTMENT.DEPARTMENT_ID
GROUP BY DEPARTMENT.DEPARTMENT_NAME;

## QUERY-6 --> List All Students Who Have Taken a Specific Course (e.g., 'Database Systems')

SELECT STUDENT.FIRST_NAME,STUDENT.LAST_NAME 
FROM STUDENT
INNER JOIN COURSE ON COURSE.DEPARTMENT_ID=STUDENT.DEPARTMENT_ID
WHERE COURSE.COURSE_NAME='Database Systems';

## QUERY-7 --> Find the Most Popular Course Based on Enrollment Numbers

SELECT COURSE.COURSE_NAME,COUNT(ENROLLMENT.COURSE_ID) AS POPULAR_COURSES
FROM COURSE 
INNER JOIN ENROLLMENT ON COURSE.COURSE_ID=ENROLLMENT.COURSE_ID
GROUP BY COURSE_NAME;

## QUERY-8 --> Find the Average Number of Credits Per Student in a Department


## QUERY-9 --> List All Professors Who Teach in More Than One Department

SELECT PROFESSOR.PROFESSOR_ID,PROFESSOR.FIRST_NAME
FROM PROFESSOR
INNER JOIN COURSE ON COURSE.PROFESSOR_ID = PROFESSOR.PROFESSOR_ID
INNER JOIN DEPARTMENT ON DEPARTMENT.DEPARTMENT_ID=COURSE.DEPARTMENT_ID
GROUP BY COURSE.PROFESSOR_ID,PROFESSOR.FIRST_NAME
HAVING COUNT(DISTINCT(COURSE.DEPARTMENT_ID))>1;

## QUERY-10--> Get the Highest and Lowest Grade in a Specific Course (e.g., 'Operating Systems')

SELECT COURSE.COURSE_NAME,MAX(CASE GRADE
   WHEN 'A+' THEN 10
   WHEN 'A'  THEN 9
   WHEN 'B+' THEN 8
   WHEN 'B'  THEN 7
   WHEN 'C'  THEN 6
   WHEN 'D'  THEN 5
   WHEN 'F'  THEN 0
   ELSE NULL
   END
)AS HIGHEST_MARKS,MIN(CASE GRADE
   WHEN 'A+' THEN 10
   WHEN 'A'  THEN 9
   WHEN 'B+' THEN 8
   WHEN 'B'  THEN 7
   WHEN 'C'  THEN 6
   WHEN 'D'  THEN 5
   WHEN 'F'  THEN 0
   ELSE NULL
   END
   ) AS LOWEST_MARKS
FROM ENROLLMENT
INNER JOIN COURSE ON ENROLLMENT.COURSE_ID=COURSE.COURSE_ID
WHERE COURSE_NAME='Operating Systems';

